import pandas as pd 
import streamlit as st
from sklearn.model_selection import train_test_split
from lightgbm import LGBMClassifier
# from xgboost import XGBClassifier
# from sklearn.metrics import accuracy_score, roc_auc_score, confusion_matrix, precision_recall_curve, precision_score, recall_score, f1_score, plot_precision_recall_curve, classification_report, plot_roc_curve, ConfusionMatrixDisplay
from PIL import Image
import plotly.figure_factory as ff
import plotly.express as px

image = Image.open('tera_banner.png')

st.image(image, use_column_width=True)

# t√≠tulo
st.title("Desengajamento de clientes de um app de sa√∫de üì±üç≤üèÉ‚Äç‚ôÄÔ∏èüßò‚Äç‚ôÇÔ∏è")

st.write("O app de sa√∫de estudado √© uma plataforma que conta com uma equipe multidisciplinar, com nutricionistas, psic√≥logos e treinadores, que auxiliam os clientes em programas de emagrecimento, vida saud√°vel e ganho de massa. O aplicativo cont√©m card√°pios, listas de compras, protocolos de jejum intermitente, exerc√≠cios, medita√ß√µes e conte√∫dos.")

st.write("Tendo impactado a vida de milh√µes de pessoas, atualmente conta com 30 mil instala√ß√µes e 60 mil usu√°rios √∫nicos por semana.")

st.write("Nesta p√°gina, ser√£o apresentadas informa√ß√µes sobre a atividade dos usu√°rios de acordo com caracter√≠sticas espec√≠ficas e, ao final, ser√£o expostos os resultados de um modelo de previs√£o que indica quais os usu√°rios com a maior probabilidade de desengajarem.")

# dataset
df = pd.read_csv('https://github.com/matheusjcandido/projeto-tera/blob/main/data_limpo2.csv', low_memory=False, header=None, sep='delimiter')
# df_cohorts = pd.read_csv('https://drive.google.com/file/d/1w99zwweds2buuJDkuHFh-t-wZIMxtl17/view?usp=sharing')
df_cohorts = pd.read_csv('https://www.dropbox.com/s/t7dplc9h8353e60/cohorts.csv?dl=1', header = None, sep = 'delimiter', low_memory=False)
# df_diff_days = df_cohorts.groupby(['user_id'])['diff_days'].max().reset_index(name='max_diff_days')
# #Histograma dos usu√°rios de acordo com o √∫ltimo dia que entraram no aplicativo
# hist_diff_days = px.bar(df_diff_days['max_diff_days'].value_counts(normalize=True))
# st.plotly_chart(hist_diff_days)
# st.caption("Histograma dos usu√°rios de acordo com o √∫ltimo dia em que entraram no aplicativo.")

# df_cohort = df_cohorts['diff_days'].value_counts().rename_axis('days').reset_index(name='counts')
# #Adiciona coluna de frequ√™ncia: dos usu√°rios que estavam no dia 0, quantos voltaram em cada dia?
# df_cohort['frequencia'] = df_cohort['counts']/df_cohort.iloc[0,1]*100
# #Histograma dos dias e frequ√™ncia de usu√°rios
# hist_frequency = px.bar(df_cohort[['days','frequencia']], x ='days', y='frequencia')
# st.plotly_chart(hist_frequency)

# df_cohorts['created_month_year'] = pd.to_datetime(df_cohorts['created_at']).dt.to_period('M')

# #Cria dataframe com os dias, m√™s e anos de cria√ß√£o e a quantidade de usu√°rios em cada um deles
# df_cohort_dates = df_cohorts.groupby(['diff_days','created_month_year'])['user_id'].count().reset_index(name='usu√°rios')
# df_cohort_dates = df_cohort_dates[df_cohort_dates['diff_days']<21]

# #Pivotear dataframe para termos os dias nas colunas
# cohort_pivot_dates = df_cohort_dates.pivot_table(index = 'created_month_year',
#                                      columns = 'diff_days',
#                                      values = 'usu√°rios')


#### POR CARACTER√çSTICAS DO USU√ÅRIO ####
st.header("Cohorts:")
st.write("Ser√£o mostrados gr√°ficos que revelam a quantidade de dias que os usu√°rios entram no app, agrupados de acordo com caracter√≠sticas espec√≠ficas.")

st.write("No geral, os usu√°rios entram no aplicativo 19 dias (em m√©dia). O boxplot a seguir traz a distribui√ß√£o geral dos usu√°rios, o que ser√° detalhado por grupos espec√≠ficos nos cohorts posteriores.")

#### ---------------- GR√ÅFICOS ---------------- ####
df_cohorts = df_cohorts.drop(df_cohorts[df_cohorts['censored'] == 1].index)
df_cohorts['rank_user_by_date'] = df_cohorts.groupby('user_id')['date'].rank(method='first')
df_rank_user_adj = df_cohorts.groupby(['user_id'])['rank_user_by_date'].max().reset_index(name='max_day')
rank_user_box = px.box(df_rank_user_adj, x = 'max_day', points = 'all')
st.plotly_chart(rank_user_box)
st.caption("Quantidade de dias que os usu√°rios entraram no app.")



st.subheader("Cohorts de acordo com caracter√≠sticas do usu√°rio:")


select = st.selectbox('Escolha um cohort para visualiza√ß√£o:', ('Escolha', 'Faixa et√°ria', 'G√™nero', 'Faixas de peso desejado', 'Objetivo do usu√°rio'))
if select == 'Escolha':
    pass
elif select == 'Faixa et√°ria':
    #Cria faixas et√°rias
    df_cohorts['faixa_etaria'] = df_cohorts['client_age']

    df_cohorts.loc[df_cohorts['client_age'] < 20,'faixa_etaria'] = '0 a 20 anos'
    df_cohorts.loc[(df_cohorts['client_age'] >= 20) & (df_cohorts['client_age'] < 30),'faixa_etaria'] = '20 a 30 anos'
    df_cohorts.loc[(df_cohorts['client_age'] >= 30) & (df_cohorts['client_age'] < 40),'faixa_etaria'] = '30 a 40 anos'
    df_cohorts.loc[(df_cohorts['client_age'] >= 40) & (df_cohorts['client_age'] < 50),'faixa_etaria'] = '40 a 50 anos'
    df_cohorts.loc[(df_cohorts['client_age'] >= 50) & (df_cohorts['client_age'] < 60),'faixa_etaria'] = '50 a 60 anos'
    df_cohorts.loc[(df_cohorts['client_age'] >= 60) & (df_cohorts['client_age'] < 70),'faixa_etaria'] = '60 a 70 anos'
    df_cohorts.loc[df_cohorts['client_age'] >= 70,'faixa_etaria'] = '70 ou mais'

    #Cria dataframe com os usu√°rios, faixa et√°ria e a quantidade de dias em que entraram no app
    df_rank_user_age = df_cohorts.groupby(['user_id','faixa_etaria'])['rank_user_by_date'].max().reset_index(name='max_day')

    #Boxplots da quantidade de dias que os usu√°rios entraram no app por faixa et√°ria
    age_boxplot = px.box(df_rank_user_age, x = 'max_day', color = 'faixa_etaria', height = 350, width = 900, category_orders = {'faixa_etaria': ['0 a 20 anos','20 a 30 anos','30 a 40 anos','40 a 50 anos','50 a 60 anos','60 a 70 anos','70 ou mais']})
    st.plotly_chart(age_boxplot)
    st.caption("")

elif select == 'G√™nero':
    #Cria dataframe com os usu√°rios, g√™nero e a quantidade de dias em que entraram no app
    df_rank_user_gender = df_cohorts.groupby(['user_id','gender'])['rank_user_by_date'].max().reset_index(name='max_day')
    df_rank_user_gender.groupby(['gender'])['max_day'].describe()

    #Boxplots da quantidade de dias que os usu√°rios entraram no app por g√™nero
    gender_boxplot = px.box(df_rank_user_gender, x = 'max_day', color = 'gender', height = 350, width = 900)
    st.plotly_chart(gender_boxplot)
    st.caption("Os usu√°rios do g√™nero masculino entram no app 15 dias (em m√©dia), enquanto as mulheres entram em m√©dia 20 dias.")

elif select == 'Faixas de peso desejado':
    #Cria√ß√£o de nova vari√°vel com a diferen√ßa entre o objetivo de peso e o peso atual do usu√°rio
    df_cohorts['delta_weight'] = df_cohorts['ideal_weight'] - df_cohorts['weight']
    #Cria faixas de peso
    df_cohorts['faixa_peso'] = df_cohorts['delta_weight']

    df_cohorts.loc[df_cohorts['delta_weight'] < -50,'faixa_peso'] = 'a) -50 kg ou mais'
    df_cohorts.loc[(df_cohorts['delta_weight'] >= -50) & (df_cohorts['delta_weight'] < -40),'faixa_peso'] = 'b) -50 a -40 kg'
    df_cohorts.loc[(df_cohorts['delta_weight'] >= -40) & (df_cohorts['delta_weight'] < -30),'faixa_peso'] = 'c) -40 a -30 kg'
    df_cohorts.loc[(df_cohorts['delta_weight'] >= -30) & (df_cohorts['delta_weight'] < -20),'faixa_peso'] = 'd) -30 a -20 kg'
    df_cohorts.loc[(df_cohorts['delta_weight'] >= -20) & (df_cohorts['delta_weight'] < -10),'faixa_peso'] = 'e) -20 a -10 kg'
    df_cohorts.loc[(df_cohorts['delta_weight'] >= -10) & (df_cohorts['delta_weight'] < 0),'faixa_peso'] = 'f) -10 a 0 kg'
    df_cohorts.loc[(df_cohorts['delta_weight'] >= 0) & (df_cohorts['delta_weight'] < 10),'faixa_peso'] = 'g) 0 a 10 kg'
    df_cohorts.loc[df_cohorts['delta_weight'] >= 10,'faixa_peso'] = 'h) 10 kg ou mais'
    #Cria dataframe com os usu√°rios, faixa et√°ria e a quantidade de dias em que entraram no app
    df_rank_user_weight = df_cohorts.groupby(['user_id','faixa_peso'])['rank_user_by_date'].max().reset_index(name='max_day')
    #Boxplots da quantidade de dias que os usu√°rios entraram no app por faixa et√°ria
    peso_box = px.box(df_rank_user_weight, x = 'max_day', color = 'faixa_peso', height = 350, width = 900, category_orders={'faixa_peso': ['a) -50 kg ou mais','b) -50 a -40 kg','c) -40 a -30 kg','d) -30 a -20 kg','e) -20 a -10 kg','f) -10 a 0 kg','g) 0 a 10 kg','h) 10 kg ou mais']})
    st.plotly_chart(peso_box)
    st.caption("As faixas et√°rias dos 20 aos 30 anos e dos 30 aos 40 anos s√£o as mais representativas. Para essas faixas, a m√©dia de entrada no aplicativo foi de 13 e 18 dias, respectivamente. Embora sejam menos representativas, as faixas dos 50 aos 60 anos e dos 60 aos 70 anos entraram em m√©dia 26 e 27 dias no aplicativo.")

elif select == 'Objetivo do usu√°rio':
    #Cria campo de objetivo
    df_cohorts['general_goal'] = df_cohorts['general_goal_Perder peso']

    df_cohorts.loc[df_cohorts['general_goal_Perder peso'] == 1,'general_goal'] = 'Perder peso'
    df_cohorts.loc[df_cohorts['general_goal_Ganhar massa'] == 1,'general_goal'] = 'Ganhar massa'
    df_cohorts.loc[df_cohorts['general_goal_Melhorar alimenta√ß√£o'] == 1,'general_goal'] = 'Melhorar alimenta√ß√£o'
    #Cria dataframe com os usu√°rios, objetivo e a quantidade de dias em que entraram no app
    df_rank_user_goal = df_cohorts.groupby(['user_id','general_goal'])['rank_user_by_date'].max().reset_index(name='max_day')
    df_rank_user_goal = df_rank_user_goal[df_rank_user_goal['general_goal'] != 0]
    objective_box = px.box(df_rank_user_goal, x = 'max_day', color = 'general_goal', height = 350, width = 900)
    st.plotly_chart(objective_box)
    st.caption("")


### POR PARTICIPA√á√ÉO NO APLICATIVO ###
st.subheader("Cohorts dos usu√°rios de acordo com a utiliza√ß√£o do aplicativo:")

option = st.selectbox('Escolha um cohort para visualiza√ß√£o:', ('Escolha', 'Plataforma', 'N√∫mero de programas', 'An√°lise nutricional', 'Treinos', 'Medita√ß√µes', 'Di√°rio de refei√ß√µes'))
if option == 'Escolha':
    pass
elif option == 'Plataforma':
    #Cria campo de plataforma
    df_cohorts['platform'] = df_cohorts['platform_android']

    df_cohorts.loc[df_cohorts['platform_android'] == 1,'platform'] = 'Android'
    df_cohorts.loc[df_cohorts['platform_ios'] == 1,'platform'] = 'iOS'
    df_cohorts.loc[df_cohorts['platform_web'] == 1,'platform'] = 'Web'

    #Cria dataframe com os usu√°rios, plataforma e a quantidade de dias em que entraram no app
    df_rank_user_platform = df_cohorts.groupby(['user_id','platform'])['rank_user_by_date'].max().reset_index(name='max_day')

    #Boxplots da quantidade de dias que os usu√°rios entraram no app por plataforma
    platform_boxplot = px.box(df_rank_user_platform, x = 'max_day', color = 'platform', height = 350, width = 900)
    st.plotly_chart(platform_boxplot)
    st.caption("")

elif option == 'N√∫mero de programas':
    #Cria faixas de quantidade de programas
    df_cohorts['faixa_programa'] = df_cohorts['programs_enrolled_count']

    df_cohorts.loc[df_cohorts['programs_enrolled_count'] < 2,'faixa_programa'] = '0 a 2'
    df_cohorts.loc[(df_cohorts['programs_enrolled_count'] >= 2) & (df_cohorts['programs_enrolled_count'] < 4),'faixa_programa'] = '2 a 4'
    df_cohorts.loc[(df_cohorts['programs_enrolled_count'] >= 4) & (df_cohorts['programs_enrolled_count'] < 6),'faixa_programa'] = '4 a 6'
    df_cohorts.loc[(df_cohorts['programs_enrolled_count'] >= 6) & (df_cohorts['programs_enrolled_count'] < 8),'faixa_programa'] = '6 a 8'
    df_cohorts.loc[(df_cohorts['programs_enrolled_count'] >= 8) & (df_cohorts['programs_enrolled_count'] < 10),'faixa_programa'] = '8 a 10'
    df_cohorts.loc[df_cohorts['programs_enrolled_count'] >= 10,'faixa_programa'] = 'mais de 10'

    #Cria dataframe com os usu√°rios, faixa de programas e a quantidade de dias em que entraram no app
    df_rank_user_program_count = df_cohorts.groupby(['user_id','faixa_programa'])['rank_user_by_date'].max().reset_index(name='max_day')

    #Boxplots da quantidade de dias que os usu√°rios entraram no app por faixas de programas
    programs_quantity_box = px.box(df_rank_user_program_count, x = 'max_day', color = 'faixa_programa', height = 350, width = 900, category_orders = {'faixa_programa': ['0 a 2','2 a 4','4 a 6','6 a 8','8 a 10','mais de 10']})
    st.plotly_chart(programs_quantity_box)
    st.caption("")

elif option == 'An√°lise nutricional':
    #Cria campo de an√°lise nutricional
    df_cohorts['has_nutritional_analysis'] = df_cohorts['nutritional_analyses_count']

    df_cohorts.loc[df_cohorts['nutritional_analyses_count'] > 0,'has_nutritional_analysis'] = 'Com an√°lise nutricional'
    df_cohorts.loc[df_cohorts['nutritional_analyses_count'] == 0,'has_nutritional_analysis'] = 'Sem an√°lise nutricional'
    df_rank_user_nutri = df_cohorts.groupby(['user_id','has_nutritional_analysis'])['rank_user_by_date'].max().reset_index(name='max_day')
    #Boxplots da quantidade de dias que os usu√°rios entraram no app por realiza√ß√£o de an√°lise nutricional
    nutri_analysis_box = px.box(df_rank_user_nutri, x = 'max_day', color = 'has_nutritional_analysis', height = 350, width = 900)
    st.plotly_chart(nutri_analysis_box)
    st.caption("")

elif option == 'Treinos':
    #Cria campo de treino
    df_cohorts['has_training'] = df_cohorts['trainings_count']

    df_cohorts.loc[df_cohorts['trainings_count'] > 0,'has_training'] = 'Com treino'
    df_cohorts.loc[df_cohorts['trainings_count'] == 0,'has_training'] = 'Sem treino'
    #Cria dataframe com os usu√°rios, se fizeram treinos e a quantidade de dias em que entraram no app
    df_rank_user_training = df_cohorts.groupby(['user_id','has_training'])['rank_user_by_date'].max().reset_index(name='max_day')
    #Boxplots da quantidade de dias que os usu√°rios entraram no app por realiza√ß√£o de treino
    training_box = px.box(df_rank_user_training, x = 'max_day', color = 'has_training', height = 350, width = 900)
    st.plotly_chart(training_box)
    st.caption("")

elif option == 'Medita√ß√µes':
    #Cria campo de medita√ß√µes
    df_cohorts['has_meditation'] = df_cohorts['meditations_count']

    df_cohorts.loc[df_cohorts['meditations_count'] > 0,'has_meditation'] = 'Com medita√ß√£o'
    df_cohorts.loc[df_cohorts['meditations_count'] == 0,'has_meditation'] = 'Sem medita√ß√£o'
    #Cria dataframe com os usu√°rios, se fizeram medita√ß√µes e a quantidade de dias em que entraram no app
    df_rank_user_meditation = df_cohorts.groupby(['user_id','has_meditation'])['rank_user_by_date'].max().reset_index(name='max_day')
    #Boxplots da quantidade de dias que os usu√°rios entraram no app por realiza√ß√£o de medita√ß√£o
    meditations_box = px.box(df_rank_user_meditation, x = 'max_day', color = 'has_meditation', height = 350, width = 900)
    st.plotly_chart(meditations_box)
    st.caption("")

elif option == 'Di√°rio de refei√ß√µes':
    #Cria campo de di√°rio de refei√ß√µes
    df_cohorts['has_meal'] = df_cohorts['meals_count_adj']

    df_cohorts.loc[df_cohorts['meals_count_adj'] > 0,'has_meal'] = 'Com di√°rio'
    df_cohorts.loc[df_cohorts['meals_count_adj'] == 0,'has_meal'] = 'Sem di√°rio'
    #Cria dataframe com os usu√°rios, se fizeram medita√ß√µes e a quantidade de dias em que entraram no app
    df_rank_user_meal = df_cohorts.groupby(['user_id','has_meal'])['rank_user_by_date'].max().reset_index(name='max_day')
    #Boxplots da quantidade de dias que os usu√°rios entraram no app por anota√ß√£o de refei√ß√£o
    meal_box = px.box(df_rank_user_meal, x = 'max_day', color = 'has_meal', height = 350, width = 900)
    st.plotly_chart(meal_box)
    st.caption("")

st.header("Modelo de predi√ß√£o:")

st.write("O grande objetivo do trabalho foi construir um modelo de predi√ß√£o para verificar quais os clientes com as maiores probabilidades de desengajamento do aplicativo, o que possibilitaria a execu√ß√£o de a√ß√µes direcionadas para prevenir o churn.")
st.write("O modelo utilizado para predi√ß√£o √© o LightGBM, que √© constru√≠do a partir de algorimos de √°rvores de decis√£o. Aqui ser√£o mostrados os IDs dos 200 clientes com maior probabilidade de desengajamento, ordenados da maior para a menor probabilidade.")


#### ---------------- LIGHTGBM  ---------------- ####

# Json special characters fix
import re
df = df.rename(columns = lambda x:re.sub('[^A-Za-z0-9_]+', '', x))

# Definir x e y
x = df.drop(['target', 'id'], axis=1)
y = df['target']

# Definir x_train e y_train, x_test e y_test
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42)

# # Rodar o modelo
st.subheader("Esses s√£o os clientes com a maior probabilidade de desengajamento:")

# LGBMClassifier

lgbm_model = LGBMClassifier(
    random_state=42,
    scale_pos_weight = 0.15, # para tratar o balanceamento
    learning_rate = 0.008,
    num_leaves = 13,
    min_child_samples = 65,
    subsample = 0.86,
    colsample_bytree = 0.53,
    n_estimators=973,
    subsample_freq = 7
)
lgbm_model.fit(x_train, y_train)

lgbm_pred = lgbm_model.predict(x_test)

lgbm_prob = lgbm_model.predict_proba(x_test)[:,1]

# selecionar os clientes que apresentam predi√ß√£o igual a 1
lgbm_pred_1 = lgbm_model.predict(x_test)[lgbm_pred == 1]

lgbm_prob_df = pd.DataFrame({'ID': x_test.index, 'prob': lgbm_prob})


lgbm_prob_df = lgbm_prob_df.sort_values('prob', ascending=False)
lgbm_prob_df = lgbm_prob_df.reset_index(drop=True)
lgbm_prob_df_head = lgbm_prob_df.head(200)

if st.button('Rodar modelo'):
    col1, col2, col3 = st.columns(3)
    col2.write(lgbm_prob_df_head.iloc[:, 0], use_column_width=True)



# XGBoost

# xgb_model = XGBClassifier(
#     n_estimators=500, 
#     learning_rate=0.01,
#     max_depth=7,
#     subsample = 0.75,
#     colsample_bynode=0.75,
#     min_child_weight= 40,
#     scale_pos_weight = 0.15 # para balancear o problema de classifica√ß√£o = total negative examples / total positive examples
# )
# xgb_model.fit(x_train, y_train)

# # xgb_pred = xgb_model.predict(x_test)

# xgb_prob = xgb_model.predict_proba(x_test)[:,1]

# # create a dataframe with 'id' and 'xgb_prob'
# xgb_prob_df = pd.DataFrame({'id': x_test.index, 'xgb_prob': xgb_prob})

# # ordenar xgb_prob_df por xgb_prob, da maior para a menor
# xgb_prob_df = xgb_prob_df.sort_values(by='xgb_prob', ascending=False)
# # retirar index
# xgb_prob_df = xgb_prob_df.reset_index(drop=True)
# xgb_prob_df_head = xgb_prob_df.head(200)

# #criando 3 colunas 
# col1, col2, col3 = st.columns(3)
# #inserindo na coluna 2
# col2.write(xgb_prob_df_head, use_column_width=True)
